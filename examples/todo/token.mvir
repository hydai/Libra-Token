module Token {
	import 0x0.Event;

	// Token resource, representing the total balance of an accuont.
	resource T {
		value: u64,
	}

	resource EventHandler {
		grant_events: Event.Handle<Self.GrantEvent>,
		mint_events: Event.Handle<Self.MintEvent>,
		transfer_events: Event.Handle<Self.TransferEvent>,
	}

	resource TC {}

	struct GrantEvent {
		owner: address,
	}
	struct MintEvent {
		addr: address,
		amount: u64,
	}
	struct TransferEvent {
		from: address,
		to: address,
		amount: u64,
	}

	public grant() acquires EventHandler {
		let sender_event_ref: &mut Self.EventHandler;
		let grant_event: Self.GrantEvent;
		let sender: address;
		let owner: address;
		let t: Self.TC;

		sender = get_txn_sender();

		// We have to hardcode the owner address here,
		// because Move IR hasn't supported a syntactic sugar for retrieving the address of
		// module publisher. (e.g. Self.get_module_publisher())
		//owner = 0x1aaa5f2abee846a747a0ee71a62ea23c1ef3c0736dd5b1e0dee0796a53cb3116; // Relace ${token_address} with your module address
		// 77 is just a magic number for representing a sender is not the owner.
		//assert(copy(sender) == copy(owner), 77);

		t = TC{};
		// Owner can get the Token capability.
		move_to_sender<TC>(move(t));
		Self.publish();

		grant_event = GrantEvent {owner: copy(sender)};
		sender_event_ref = borrow_global_mut<EventHandler>(copy(sender));
		Event.emit_event<Self.GrantEvent>(&mut move(sender_event_ref).grant_events, move(grant_event));
		return;
	}

	// Return an immutable reference to the TokenCapability of the sender if
	// it exists. This will only succeed if the transaction sender is the owner.
	public borrow_sender_capability(): bool acquires TC {
		let sender: address;
		let t_ref: &mut Self.TC;

		sender = get_txn_sender();
		t_ref = borrow_global_mut<TC>(move(sender));

		return true;
	}

	// Create a new Token.T with a value of 0
	public zero(): Self.T {
		return T{value: 0};
	}

	// Return the value of a Token
	public value(token_ref: &Self.T): u64 {
		return *&move(token_ref).value;
	}

	// Publish an initial 0 balance Token for the sender
	public publish() {
		let t: Self.T;
		let eh: Self.EventHandler;
		let grant_handle: Event.Handle<Self.GrantEvent>;
		let mint_handle: Event.Handle<Self.MintEvent>;
		let transfer_handle: Event.Handle<Self.TransferEvent>;

		t = Self.zero();
		move_to_sender<T>(move(t));

		grant_handle = Event.new_event_handle<Self.GrantEvent>();
		mint_handle = Event.new_event_handle<Self.MintEvent>();
		transfer_handle = Event.new_event_handle<Self.TransferEvent>();
		eh = EventHandler {
			grant_events: move(grant_handle),
			mint_events: move(mint_handle),
			transfer_events: move(transfer_handle),
		};
		move_to_sender<EventHandler>(move(eh));
		return;
	}

	// `mint_to_address` will only be called by the owner.
	// This mints a new Token worth `amount` to the payee.
	public mint_to_address(payee: address, amount: u64) acquires T, TC {
		let mint_token: Self.T;

		// Mint the coin
		if (Self.borrow_sender_capability() == true) {
			mint_token = Self.mint(copy(amount));

			// Deposit the minted `coin`
			Self.deposit(move(payee), move(mint_token));
		}
		return;
	}

	// Mint a new Token worth `value`.
	mint(value: u64): Self.T {
		return T{value: move(value)};
	}

	// Return the Token balance of `account`.
	public balanceOf(account: address): u64 acquires T {
		let token_ref: &Self.T;
		let token_val: u64;
		token_ref = borrow_global<T>(move(account));
		token_val = Self.value(move(token_ref));
		return move(token_val);
	}

	// Return the Token balance of the transaction sender.
	public balance(): u64 acquires T {
		let sender: address;
		let balance_val: u64;
		sender = get_txn_sender();
		balance_val = Self.balanceOf(move(sender));
		return move(balance_val);
	}

	// Deposits the `to_deposit` token into the `payee`'s account
	public deposit(payee: address, to_deposit: Self.T) acquires T {
		let deposit_value: u64;
		let payee_token_ref: &mut Self.T;
		let payee_token_value: u64;
		let value: u64;

		payee_token_ref = borrow_global_mut<T>(move(payee));
		payee_token_value = *(&mut copy(payee_token_ref).value);

		// Check that the `to_deposit` token is non-zero
		T{ value: deposit_value } = move(to_deposit);
		assert(copy(deposit_value) > 0, 7);

		*(&mut move(payee_token_ref).value) = move(payee_token_value) + move(deposit_value);
		return;
	}

	public withdraw(to_withdraw: &mut Self.T, amount: u64): Self.T {
		let value: u64;

		value = *(&mut copy(to_withdraw).value);
		assert(copy(value) >= copy(amount), 10);

		*(&mut move(to_withdraw).value) = move(value) - copy(amount);
		return T{value: move(amount)};
	}

	// Transfer the token from the sender to the payee.
	public transfer(payee: address, amount: u64) acquires T {
		let to_pay: &mut Self.T;
		let sender: address;
		let to_withdraw: Self.T;

		sender = get_txn_sender();
		to_pay = borrow_global_mut<T>(move(sender));

		// Withdraw the token from the sender.
		to_withdraw = Self.withdraw(move(to_pay), move(amount));
		Self.deposit(move(payee), move(to_withdraw));
		return;
	}
}
